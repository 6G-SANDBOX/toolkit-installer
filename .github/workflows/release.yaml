name: Publish release

on:
  push:
    branches:
      - main
    paths:
      - "pyproject.toml"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install dependencies
        run: uv sync
      
      - name: Get new version from pyproject.toml
        id: get_new_version
        run: |
          echo "NEW_VERSION=$(python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["project"]["version"])')" >> $GITHUB_ENV
       
      - name: Get latest release version
        id: get_latest_release
        run: |
          echo "LATEST_RELEASE=$(git describe --tags --abbrev=0 | cut -c2-)" >> $GITHUB_ENV

      - name: Check if new version is greater than latest release
        id: check_version
        run: |
          if [ "$(printf "%s\n%s" "$LATEST_RELEASE" "$NEW_VERSION" | sort -V | tail -n1)" = "$NEW_VERSION" ]; then
            echo "Proceeding with release..."
          else
            echo "No new version to release or downgrade detected."
            exit 1
          fi
      
      - name: Extract changelog entry
        id: get_changelog
        run: |
          sed -n "/## \[v$NEW_VERSION\]/, /^## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          echo "[v$NEW_VERSION]: https://github.com/6G-SANDBOX/TNLCM/compare/v$LATEST_RELEASE...v$NEW_VERSION" >> release_notes.md


      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          name: "v${{ env.NEW_VERSION }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: "true"
